<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Private ChatApp</title>
<style>
  /* Reset and base */
  * {
    box-sizing: border-box;
  }
  body,
  html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #121212;
    color: #eee;
    overflow: hidden;
  }
  #app {
    display: flex;
    flex-direction: column;
    height: 100vh;
    max-height: 600px;
    max-width: 400px;
    margin: auto;
    border: 1px solid #222;
    border-radius: 12px;
    background: #1e1e1e;
    box-shadow: 0 0 12px rgba(0,0,0,0.5);
  }
  header {
    background: #2a2a2a;
    padding: 12px 16px;
    font-weight: bold;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  header .username {
    font-weight: 700;
    color: #61dafb;
  }
  #userActions {
    display: flex;
    gap: 12px;
  }
  #userActions button {
    cursor: pointer;
    background: #61dafb;
    color: #121212;
    border: none;
    border-radius: 8px;
    padding: 6px 12px;
    font-weight: 700;
    font-size: 0.9rem;
    user-select: none;
    transition: background 0.2s ease;
  }
  #userActions button:hover {
    background: #3aa3d8;
  }
  main {
    flex: 1;
    display: flex;
    background: #121212;
    overflow: hidden;
  }
  /* Sidebar with users */
  #sidebar {
    width: 160px;
    border-right: 1px solid #333;
    background: #1f1f1f;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    overflow-y: auto;
  }
  #sidebar h2 {
    font-size: 0.9rem;
    font-weight: 600;
    padding: 8px 12px;
    user-select: none;
    color: #ddd;
    white-space: nowrap;
  }
  #userList {
    flex: 1;
    width: 100%;
    overflow-y: auto;
  }
  .user {
    padding: 10px 12px;
    cursor: pointer;
    text-align: left;
    border-bottom: 1px solid #222;
    transition: background-color 0.3s;
    color: #aaa;
    font-size: 0.9rem;
    user-select: none;
    white-space: normal;
    line-height: 1.3;
    height: auto;
    min-height: 36px;
    display: flex;
    align-items: center;
  }
  .user.active, .user:hover {
    background-color: #333;
    color: #61dafb;
  }
  #addUserBtn {
    background: #61dafb;
    color: black;
    border: none;
    margin: 8px 12px;
    padding: 8px 0;
    font-weight: 700;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    user-select: none;
    width: calc(100% - 24px);
    outline-offset: 1px;
  }
  #addUserBtn:active {
    background: #3aa3d8;
  }
  /* Chat container */
  #chatContainer {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: #121212;
  }
  #messages {
    flex: 1;
    overflow-y: auto;
    padding: 8px 12px;
    font-size: 0.9rem;
    display: flex;
    flex-direction: column;
    gap: 6px;
    scroll-behavior: smooth;
  }
  .message {
    max-width: 75%;
    padding: 8px 12px;
    border-radius: 16px;
    word-wrap: break-word;
    line-height: 1.3;
    position: relative;
    user-select: text;
    white-space: pre-wrap;
    background-clip: padding-box;
  }
  .message.sent {
    background-color: #61dafb;
    color: #121212;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }
  .message.received {
    background-color: #2a2a2a;
    color: #ddd;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
  }
  #messageForm {
    display: flex;
    padding: 8px 12px;
    border-top: 1px solid #333;
  }
  #messageInput {
    flex: 1;
    padding: 8px 12px;
    border-radius: 20px;
    border: none;
    font-size: 1rem;
    outline: none;
    background: #2a2a2a;
    color: #eee;
    resize: none;
    max-height: 100px;
    line-height: 1.3;
  }
  #sendBtn {
    background: #61dafb;
    border: none;
    margin-left: 8px;
    padding: 8px 16px;
    font-weight: 700;
    border-radius: 20px;
    cursor: pointer;
    color: #121212;
    font-size: 1rem;
  }
  #sendBtn:active {
    background: #3aa3d8;
  }
  /* Login overlay */
  #loginOverlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(18, 18, 18, 0.95);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 10;
    padding: 16px;
  }
  #loginOverlay input {
    padding: 12px 16px;
    font-size: 1.2rem;
    border-radius: 8px;
    border: none;
    margin-bottom: 12px;
    width: 280px;
    outline: none;
  }
  #loginOverlay button {
    background: #61dafb;
    color: #121212;
    font-weight: 700;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    cursor: pointer;
    width: 280px;
    font-size: 1.1rem;
    margin-bottom: 8px;
  }
  #loginOverlay button:active {
    background: #3aa3d8;
  }
  #loginErrorMsg {
    color: #f33;
    margin-bottom: 12px;
    min-height: 1.2em;
    font-weight: 700;
  }
  /* Responsive adjustments */
  @media (max-width: 450px) {
    #sidebar {
      width: 140px;
    }
    #app {
      max-width: 100vw;
      max-height: 100vh;
      border-radius: 0;
      height: 100vh;
      width: 100vw;
    }
    #loginOverlay input,
    #loginOverlay button {
      width: 90vw;
    }
  }
</style>
</head>
<body>
<div id="app" aria-label="Private Chat Application">
  <header>
    <div>Private ChatApp</div>
    <div id="userActions">
      <div class="username" aria-live="polite" title="Your username"></div>
      <button id="changePasswordBtn" type="button" title="Change Password" aria-label="Change Password">Change Password</button>
      <button id="logoutBtn" type="button" title="Logout" aria-label="Logout">Logout</button>
    </div>
  </header>
  <main>
    <nav id="sidebar" aria-label="User contacts">
      <h2>Chats</h2>
      <div id="userList" role="list" tabindex="0"></div>
      <button id="addUserBtn" type="button" aria-label="Add new chat user">+ Add User</button>
    </nav>
    <section id="chatContainer" aria-live="polite" aria-label="Chat messages">
      <div id="noSelectionMsg" style="flex:1; display:flex; align-items:center; justify-content:center; font-size:1rem; color:#b0b0b0;">
        Select a chat to start messaging
      </div>
      <div id="messages" role="log" aria-relevant="additions" aria-atomic="false" tabindex="0" style="display:none"></div>
      <form id="messageForm" style="display:none" aria-label="Send message form">
        <textarea id="messageInput" rows="1" placeholder="Type a message" aria-required="true"></textarea>
        <button type="submit" id="sendBtn" aria-label="Send message">Send</button>
      </form>
    </section>
  </main>
</div>

<div id="loginOverlay" role="dialog" aria-modal="true" aria-labelledby="loginTitle" aria-describedby="loginDesc">
  <h2 id="loginTitle" style="color:#eee;">Welcome to Private ChatApp</h2>
  <div id="loginErrorMsg" role="alert" aria-live="assertive"></div>
  <input type="text" id="loginUsername" placeholder="Username" aria-label="Enter your username" autocomplete="username" />
  <input type="password" id="loginPassword" placeholder="Password" aria-label="Enter your password" autocomplete="current-password" />
  <button id="loginBtn" type="button" aria-describedby="loginDesc">Login</button>
  <button id="registerBtn" type="button" aria-describedby="loginDesc">Register</button>
  <div id="loginDesc" style="margin-top: 8px; font-size: 0.85rem; color: #ccc;">
    You can create an account or login with your existing credentials.
  </div>
</div>

<script>
(function(){
  const $ = (id) => document.getElementById(id);
  // Elements
  const loginOverlay = $('loginOverlay');
  const loginUsernameInput = $('loginUsername');
  const loginPasswordInput = $('loginPassword');
  const loginBtn = $('loginBtn');
  const registerBtn = $('registerBtn');
  const loginErrorMsg = $('loginErrorMsg');

  const usernameDisplay = document.querySelector('header .username');
  const addUserBtn = $('addUserBtn');
  const userList = $('userList');
  const messagesContainer = $('messages');
  const messageForm = $('messageForm');
  const messageInput = $('messageInput');
  const noSelectionMsg = $('noSelectionMsg');

  const logoutBtn = $('logoutBtn');
  const changePasswordBtn = $('changePasswordBtn');

  let currentUser = null;

  // Storage helpers for users credentials and chat data
  function loadCredentials() {
    const stored = localStorage.getItem('chatapp_user_credentials');
    if (!stored) return {};
    try {
      return JSON.parse(stored);
    } catch {
      return {};
    }
  }
  function saveCredentials(creds) {
    localStorage.setItem('chatapp_user_credentials', JSON.stringify(creds));
  }

  // Store user's chat contacts separately by username
  function saveUsers(users) {
    localStorage.setItem(`chatapp_users_${currentUser}`, JSON.stringify(users));
  }
  function loadUsers() {
    const stored = localStorage.getItem(`chatapp_users_${currentUser}`);
    if(!stored) return [];
    try {return JSON.parse(stored);} catch{return [];}
  }

  function userKey(userA, userB) {
    return 'chatapp_messages_' + [userA, userB].sort().join('_');
  }
  function saveMessages(userA, userB, messages) {
    const key = userKey(userA, userB);
    localStorage.setItem(key, JSON.stringify(messages));
  }
  function loadMessages(userA, userB) {
    const key = userKey(userA, userB);
    const stored = localStorage.getItem(key);
    if(!stored) return [];
    try {return JSON.parse(stored);} catch{return [];}
  }

  function formatTimestamp(ts) {
    const d = new Date(ts);
    let h = d.getHours();
    let m = d.getMinutes();
    if (h < 10) h = '0'+h;
    if (m < 10) m = '0'+m;
    return h+':'+m;
  }

  let activeChatUser = null;

  function renderUserList(){
    const users = loadUsers();
    userList.innerHTML = '';
    users.forEach(u => {
      if(u === currentUser) return;
      const div = document.createElement('div');
      div.className = 'user';
      if(u === activeChatUser) div.classList.add('active');
      div.tabIndex = 0;
      div.setAttribute('role','listitem');
      div.textContent = u;
      div.title = `Chat with ${u}`;
      div.addEventListener('click', () => selectChat(u));
      div.addEventListener('keydown', e => {
        if(e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          selectChat(u);
        }
      });
      userList.appendChild(div);
    });
  }

  function addNewUser() {
    let newUser = prompt('Enter username to chat with:');
    if(!newUser) return;
    newUser = newUser.trim();
    if(newUser === '') return;
    if(newUser === currentUser){
      alert("You cannot add yourself.");
      return;
    }
    let users = loadUsers();
    if(users.includes(newUser)){
      alert("User already in your chat list.");
      return;
    }
    users.push(newUser);
    saveUsers(users);
    renderUserList();
  }

  function selectChat(user){
    activeChatUser = user;
    renderUserList();
    renderMessages();
    noSelectionMsg.style.display = 'none';
    messagesContainer.style.display = 'flex';
    messageForm.style.display = 'flex';
    messageInput.focus();
  }

  function renderMessages(){
    if(!activeChatUser) return;
    const msgs = loadMessages(currentUser, activeChatUser);
    messagesContainer.innerHTML = '';
    msgs.forEach(msg => {
      const div = document.createElement('div');
      div.classList.add('message');
      div.classList.add(msg.sender === currentUser ? 'sent' : 'received');
      div.textContent = msg.text;
      const timeSpan = document.createElement('span');
      timeSpan.style.position = 'absolute';
      timeSpan.style.fontSize = '0.7rem';
      timeSpan.style.bottom = '4px';
      timeSpan.style.right = '12px';
      timeSpan.style.opacity = '0.6';
      timeSpan.textContent = formatTimestamp(msg.timestamp);
      div.appendChild(timeSpan);
      messagesContainer.appendChild(div);
    });
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function generateTestUserReply(userMessage) {
    const msg = userMessage.toLowerCase().trim();
    if (msg.includes('hello') || msg.includes('hi')) return "Hello! How can I help you?";
    if (msg.includes('how are you')) return "I'm just a demo user, but I'm doing great!";
    if (msg.includes('what is your name')) return "I'm TestUser, your demo chat companion.";
    if (msg.includes('time')) return `It's around ${new Date().toLocaleTimeString()}.`;
    if (msg.includes('help')) return "Sure! Ask me anything or type 'exit' to end.";
    if (msg.includes('weather')) return "I can't check the weather, but hope it's nice where you are!";
    if (msg.endsWith('?')) return "Interesting question! Let me think about it...";
    return "I see. Can you tell me more?";
  }

  function sendMessage(text){
    if(!activeChatUser) return;
    if(!text.trim()) return;

    const msgs = loadMessages(currentUser, activeChatUser);
    const ts = Date.now();
    const message = {sender: currentUser, text: text.trim(), timestamp: ts};
    msgs.push(message);
    saveMessages(currentUser, activeChatUser, msgs);
    renderMessages();

    if(activeChatUser === 'TestUser' && currentUser !== 'TestUser'){
      setTimeout(() => {
        const replyText = generateTestUserReply(text);
        const msgsAfter = loadMessages(currentUser, 'TestUser');
        msgsAfter.push({
          sender: 'TestUser',
          text: replyText,
          timestamp: Date.now()
        });
        saveMessages(currentUser, 'TestUser', msgsAfter);
        if(activeChatUser === 'TestUser'){
          renderMessages();
        }
      }, 1200);
    }
  }

  messageForm.addEventListener('submit', e => {
    e.preventDefault();
    const text = messageInput.value;
    if(text.trim() === '') return;
    sendMessage(text);
    messageInput.value = '';
    messageInput.focus();
  });

  messageInput.addEventListener('keydown', function(e) {
    if(e.key === 'Enter' && !e.shiftKey){
      e.preventDefault();
      messageForm.requestSubmit();
    }
  });

  function clearLoginError() {
    loginErrorMsg.textContent = '';
  }
  function setLoginError(msg) {
    loginErrorMsg.textContent = msg;
  }

  // Register new user
  registerBtn.addEventListener('click', () => {
    clearLoginError();
    const username = loginUsernameInput.value.trim();
    const password = loginPasswordInput.value;
    if(!username) {
      setLoginError('Please enter a username to register.');
      return;
    }
    if(!password) {
      setLoginError('Please enter a password.');
      return;
    }
    const creds = loadCredentials();
    if(username in creds){
      setLoginError('Username already exists. Choose a different name.');
      return;
    }
    creds[username] = password;
    saveCredentials(creds);
    alert('Account created! You can now log in.');
    loginUsernameInput.value = username;
    loginPasswordInput.value = '';
    clearLoginError();
  });

  // Login user
  loginBtn.addEventListener('click', () => {
    clearLoginError();
    const username = loginUsernameInput.value.trim();
    const password = loginPasswordInput.value;
    if(!username){
      setLoginError('Enter your username.');
      return;
    }
    if(!password){
      setLoginError('Enter your password.');
      return;
    }
    const creds = loadCredentials();
    if(!(username in creds)){
      setLoginError('Username does not exist. Please register.');
      return;
    }
    if(creds[username] !== password){
      setLoginError('Incorrect password. Try again.');
      return;
    }
    // Successful login
    currentUser = username;
    loginOverlay.style.display = 'none';
    usernameDisplay.textContent = currentUser;

    let users = loadUsers();
    if(!users.includes(currentUser)){
      users.push(currentUser);
    }
    const testUser = 'TestUser';
    if(currentUser !== testUser && !users.includes(testUser)){
      users.push(testUser);
      if(loadMessages(currentUser, testUser).length === 0){
        const welcomeMsg = [{
          sender: testUser,
          text: "Hello! This is a test chat.",
          timestamp: Date.now()
        }];
        saveMessages(currentUser, testUser, welcomeMsg);
      }
    }
    saveUsers(users);
    renderUserList();
  });

  // Logout user
  logoutBtn.addEventListener('click', () => {
    if (confirm('Are you sure you want to logout?')) {
      currentUser = null;
      activeChatUser = null;
      usernameDisplay.textContent = '';
      loginUsernameInput.value = '';
      loginPasswordInput.value = '';
      messageInput.value = '';
      messagesContainer.innerHTML = '';
      noSelectionMsg.style.display = 'flex';
      messagesContainer.style.display = 'none';
      messageForm.style.display = 'none';
      loginOverlay.style.display = 'flex';
      loginUsernameInput.focus();
    }
  });

  // Change password
  changePasswordBtn.addEventListener('click', () => {
    if(!currentUser) return alert('You must be logged in to change your password.');
    const currentPass = prompt('Enter your current password:');
    if(currentPass === null) return; // Cancel
    const newPass = prompt('Enter your new password:');
    if(newPass === null) return; // Cancel
    if(newPass.trim() === '') return alert('New password cannot be empty.');
    const creds = loadCredentials();
    if(creds[currentUser] !== currentPass){
      alert('Current password is incorrect.');
      return;
    }
    creds[currentUser] = newPass;
    saveCredentials(creds);
    alert('Password changed successfully.');
  });

  loginUsernameInput.addEventListener('keydown', e => {
    if(e.key === 'Enter'){
      e.preventDefault();
      loginBtn.click();
    }
  });
  loginPasswordInput.addEventListener('keydown', e => {
    if(e.key === 'Enter'){
      e.preventDefault();
      loginBtn.click();
    }
  });

  addUserBtn.addEventListener('click', addNewUser);

  messagesContainer.addEventListener('keydown', e => {
    if(e.key === 'Tab' && e.shiftKey && messageInput === document.activeElement){
      e.preventDefault();
      userList.focus();
    }
  });

  loginUsernameInput.focus();

})();
</script>
</body>
</html>
</content>
</create_file>